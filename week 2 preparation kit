// sales by match

public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int pairs = 0;
        Set<Integer> unmatched = new HashSet<>();
        for (int i = 0; i < n; ++i) {
            int ci = in.nextInt();
            if (unmatched.contains(ci)) {
                unmatched.remove(ci);
                ++pairs;
            }
            else {
                unmatched.add(ci);
            }
        }
        System.out.println(pairs);
    }
}


//drawing book

public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int p = in.nextInt();
        int ans = Math.min(p/2,(n-p)/2);
        System.out.println(ans);
    }
}

//tower breakers
Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        int N, M;
        while (T-- > 0) {
            N = in.nextInt();
            M = in.nextInt();
            System.out.println((M != 1 && N%2 == 1)? 1 : 2 );

        }
    }
}

//caesar cipher
public class Solution {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int len = s.nextInt(); s.nextLine();
        String str = s.nextLine();
        int shift = s.nextInt();
        
        char sarr[] = str.toCharArray();
        for (int i=0; i<sarr.length; i++) {
            sarr[i] = cryptIt(sarr[i], shift);
        }
        System.out.println(new String(sarr));
    }
    
    public static char cryptIt(char c, int shift) {
        if (!Character.isAlphabetic(c)) return c;
        char base = 'A';
        if (c >= 'a') base = 'a';
        return (char)(((c - base + shift) % 26) + base);
    }
}
    


//max min
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt(), k = in.nextInt();
        int[] x = new int[n];
        for(int i = 0; i < n; i++) x[i] = in.nextInt();
        Arrays.sort(x);
        System.out.println(f(n, k, x));
    }
    
    private static int f(int n, int k, int[] x){
        int min = 100000000;
        for(int i = 0; i + k-1 < x.length; i++){
            if(x[i+k-1] - x[i] < min) min = x[i+k-1]-x[i];
        }
        return min;
    }
}

//grud challange
class Result {

        public static String gridChallenge(List<String> grid) {
            
            for (int i = 0; i < grid.size(); i++) {
                char[] chararray = grid.get(i).toCharArray();
                Arrays.sort(chararray);
                grid.set(i, new String(chararray));
            }

            for (int i = 0; i < grid.get(0).length(); i++) {
                for (int j = 0; j < grid.size()-1; j++) {
                    if (grid.get(j).charAt(i) > grid.get(j+1).charAt(i)) {
                        return "NO";
                    }
                }
            }
            return "YES";
        }
    }

    public class Solution {
        public static void main(String[] args) throws IOException {
            BufferedReader bufferedReader = new BufferedReader(
                new InputStreamReader(System.in));
            BufferedWriter bufferedWriter = new BufferedWriter(
                new FileWriter(System.getenv("OUTPUT_PATH")));

            int t = Integer.parseInt(bufferedReader.readLine().trim());

            IntStream.range(0, t).forEach(tItr -> {
                try {
                    int n = Integer.parseInt(bufferedReader.readLine().trim());

                    List<String> grid = IntStream.range(0, n).mapToObj(i -> {
                        try {
                            return bufferedReader.readLine();
                        } catch (IOException ex) {
                            throw new RuntimeException(ex);
                        }
                    })
                        .collect(toList());

                    String result = Result.gridChallenge(grid);

                    bufferedWriter.write(result);
                    bufferedWriter.newLine();
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            });

            bufferedReader.close();
            bufferedWriter.close();
        }
    }

//sherlock and arraypublic class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner in = new Scanner(System.in);
        int k = in.nextInt();
        for(int i=0; i<k; i++){
            int n = in.nextInt();
            int[] arr = new int[n];
            for(int j=0; j<n; j++){
                arr[j] = in.nextInt();
            }
            System.out.println(decision(arr));
        }
    }
    
    public static String decision(int[] arr){
        int sum = 0;
        for(int i=0; i<arr.length; i++){
            sum += arr[i];
        }
        
        //curr is cimulated sum in the left
        int curr = 0;
        for(int j=0; j<arr.length; j++){
            //left part equals right part
            if(curr == sum - arr[j]-curr){
                return "YES";
            }
            curr += arr[j];
        }
        return "NO";
    }
}

//recursive digit sum
char[] c = n.toCharArray();
        long sum = 0;
        for (int i = 0; i < c.length; i++) {
            int a = Integer.parseInt(String.valueOf(c[i]));
            sum = sum + a;
        }
        
        sum = sum * k;
        char[] chars = ("" + sum).toCharArray();
        return getTotalSum(chars);
    }
    
    public static int getTotalSum(char[] array) {
        if(array.length == 1 && Character.getNumericValue(array[0]) <= 9) {
            return  Character.getNumericValue(array[0]);
        }
        int ans = 0;
        for (char c : array) {
            ans = ans + Character.getNumericValue(c);
        }
        array = ("" + ans).toCharArray();
        return getTotalSum(array);
    }
    
    
    //counter game
    public class Solution {

    static BufferedReader reader;
    static StringTokenizer tokenizer = null;
    static PrintWriter writer;

    static String nextToken() throws IOException {
        while (tokenizer == null || (!tokenizer.hasMoreTokens())) {
            tokenizer = new StringTokenizer(reader.readLine());
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws NumberFormatException, IOException {
        return Integer.parseInt(nextToken());
    }

    static double nextDouble() throws NumberFormatException, IOException {
        return Double.parseDouble(nextToken());
    }

    static long nextLong() throws NumberFormatException, IOException {
        return Long.parseLong(nextToken());
    }

    public static void main(String[] args) throws IOException {
        reader = new BufferedReader(new InputStreamReader(System.in));
        writer = new PrintWriter(System.out);
        cherry();
        reader.close();
        writer.close();
    }

    static BigInteger two = new BigInteger("2");

    static boolean isWin(BigInteger bi) {
        if (bi.equals(BigInteger.ONE)) {
            return false;
        }
        if (bi.bitCount() == 1) {
            return !isWin(bi.divide(two));
        } else {
            return !isWin(bi.clearBit(bi.bitLength() - 1));
        }
    }

    static void cherry() throws NumberFormatException, IOException {
        int T = nextInt();
        for (int t = 0; t < T; t++) {
            BigInteger bi = new BigInteger(nextToken());
            writer.println(isWin(bi) ? "Louise" : "Richard");
        }
    }
}


//Sum vs XOR
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long n = in.nextLong();
        int zeroCount = 0;
        while (n>0) {
            if (n%2==0)
                zeroCount++;
            n/=2;
        }
        System.out.println(1l<<zeroCount);
    }
}



