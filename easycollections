//grading students

import java.util.*;

public class Main {

    public static int getRoundedGrade(int grade) {
        if (grade >= 38) {
            int mod5 = grade % 5;
            if (mod5 > 2) {
                grade += 5 - mod5;
            }
        }

        return grade;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        for(int a0 = 0; a0 < n; a0++){
            int grade = in.nextInt();
            System.out.println(getRoundedGrade(grade));
        }
        in.close();
    }
}

//java hashset


HashSet<String> myhash = new HashSet<String>();
for (int i = 0; i < t; i++) {
    myhash.add(pair_left[i]+"#"+pair_right[i]);
    System.out.println(myhash.size());
}
     
     
//apple and orange

public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int s = in.nextInt();
        int t = in.nextInt();
        int a = in.nextInt();
        int b = in.nextInt();
        int m = in.nextInt();
        int n = in.nextInt();
        int[] apple = new int[m];
        int app = 0;
        for(int apple_i=0; apple_i < m; apple_i++){
            apple[apple_i] = in.nextInt();
            if (a + apple[apple_i] >= s && a + apple[apple_i] <= t) {
                app++;
            }
        }
        int[] orange = new int[n];
        int or = 0;
        for(int orange_i=0; orange_i < n; orange_i++){
            orange[orange_i] = in.nextInt();
            if (b + orange[orange_i] >= s && b + orange[orange_i] <= t) {
                or++;
            }
        }
        
        System.out.println(app);
        System.out.println(or);
    }
}

//java map

public class Solution {

    public static void main(String[] args) {
              try {
            int no_of_entries = 0;
            int i = 0;
            String name = null;
            int number = 0;
            String query = null;
            HashMap<String, Integer> phoneBook = new HashMap<String, Integer>();
            BufferedReader b = new BufferedReader(new InputStreamReader(
                    System.in));
            no_of_entries = Integer.parseInt(b.readLine());            
            while (i < no_of_entries) {
                name = b.readLine();
                number = Integer.parseInt(b.readLine());
                phoneBook.put(name, number);
                i++;
            }
            while (!(query = b.readLine().trim()).isEmpty()) {
                if (phoneBook.containsKey(query))
                    System.out.println(query + "=" + phoneBook.get(query));
                else
                    System.out.println("Not found");
            }
        } catch (Exception e) {
            
        }
    }
}


//sales by match
class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        HashMap<Integer, Integer> colors = new HashMap<Integer, Integer>();
        
        while(n-- > 0) {
            int c = scan.nextInt();
            Integer frequency = colors.get(c);
            
            // If new color, add to map
            if(frequency == null) {
                colors.put(c, 1);
            }
            else { // Increment frequency of existing color
                colors.put(c, frequency + 1);
            }
        }
        scan.close();
        
        // Count and print the number of pairs
        int pairs = 0;
        for(Integer frequency : colors.values()) {
            pairs += frequency >> 1;
        }
        System.out.println(pairs);
    }
}

//breaking the records
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] score = new int[n];
        for(int score_i=0; score_i < n; score_i++){
            score[score_i] = in.nextInt();
        }
        // your code goes here
        int most = score[0];
        int least = score[0];
        int mr = 0;
        int lr = 0;
        for( int i = 1; i < n; i++ ){
            if( score[i] > most ){
                mr++;
                most = score[i];
            }
            if( score[i] < least ){
                lr++;
                least = score[i];
            }
        }
        
        System.out.print(mr + " " + lr);
    }
}

//jesse and cookies
public class Solution {

    public static void main(String[] args) {
    
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
        int k=scan.nextInt();
        PriorityQueue<Integer> queue=new PriorityQueue<Integer>();
        for(int i=0;i<n;i++)
            {
            queue.add(scan.nextInt());
        }
        int count=0;
        while(queue.peek()<k)
            {
            if(queue.size()>=2)
                {
            int x=queue.remove();
            int y=queue.remove();
            y=x+2*y;
            queue.add(y);
            count++;
            }
            else
                {
                count=-1;
                break;
            }
        }
        System.out.println(count);
    }
}


//digit frequency


