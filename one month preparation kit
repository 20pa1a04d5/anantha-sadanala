//PLUS MINUS

public class Solution {
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int arr[] = new int[n];
        int positiveCount = 0, negetiveCount = 0,zeroCount = 0;
        for(int i=0; i < n; i++){
            arr[i] = in.nextInt();
            if(arr[i]<0){
                negetiveCount++;
            }else if(arr[i]>0){
                positiveCount++;
            }else if(arr[i]==0){
                zeroCount++;
            }
        }
        float a=0f,b=0f,c=0f;
        a = (float)positiveCount/n;
        b = (float)negetiveCount/n;
        c = (float)zeroCount/n;
        System.out.printf("%.6f \n",a);
        System.out.printf("%.6f \n",b);
        System.out.printf("%.6f",c);
    }
}



//MINI MAX SUM

 public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long[] nums = new long[5];
        
        long max = 0, min= 0 , sum =0;
        nums[0] = max = min = sum = in.nextLong(); 
        for (int i = 1; i < 5; i++) {
            nums[i] = in.nextLong();
            if(nums[i]>max) max = nums[i];
            if(nums[i]<min) min = nums[i];
            sum += nums[i];
        }
        System.out.println( (sum - max) + " " + (sum - min));
       
    }
}



//lonly integer

BitSet bits = new BitSet(a.size());
    for(Integer i:a){
        bits.flip(i);
    }
    return bits.nextSetBit(0);
}



//diagonal difference

int diagonal = 0;
    for (int i = 0; i < arr.size(); i++){
        diagonal += arr.get(i).get(i);
        diagonal -= arr.get(i).get(arr.size() - (i+1));
    }
    return Math.abs(diagonal);

    }
    
    
    //time converstion
    
    public class Solution {

       public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine(); //07:05:45PM
        DateFormat inFormat = new SimpleDateFormat( "hh:mm:ssaa");
        DateFormat outFormat = new SimpleDateFormat( "HH:mm:ss");

        Date date = null;
        try {
            date = inFormat.parse(s); 
        }catch (ParseException e ){
            e.printStackTrace();
        }
        if( date != null ){
            String myDate = outFormat.format(date);
            System.out.println(myDate);
        }
    }

}


//pangrams

public class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str = scan.nextLine().toLowerCase();
        scan.close();
        
        HashSet<Character> set = new HashSet();
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (Character.isLetter(ch)) {
                set.add(ch);
            }
        }
        System.out.println(set.size() == 26 ? "pangram" : "not pangram");
    }
}

//sparse arrays

public class Solution {

    public static void main(String[] args) {        
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        String[] stringArr = new String[n];

        for (int i = 0; i < n; i++){
                stringArr[i] = scan.next();              
            }

        int q = scan.nextInt();
        for (int i = 0; i < q; i++){
                String stringQue = scan.next();

                int occNum = 0;
                for (int j = 0; j < n; j++){
                    if (stringQue.equals(stringArr[j])) occNum++;                                           
                }
             System.out.println(occNum);
        }   
    }
}

//flipping bits


public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        long max = Integer.MAX_VALUE;
        max = max * 2 + 1;
        for(int i = 0; i < n; i++) {
            System.out.println(~in.nextLong() & max);
        }
    }
}

//subarray division 1

public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] squares = new int[n];
        for(int squares_i=0; squares_i < n; squares_i++){
            squares[squares_i] = in.nextInt();
        }
        int d = in.nextInt();
        int m = in.nextInt();
        int result = 0;
        
        for(int i = 0; i < n-m+1; i++){
            int tmpSum = 0;
            for(int j = i; j < i+m; j++){
                tmpSum+= squares[j];
            } 
            if(tmpSum == d){
                result++;
            }
        }
        System.out.println(result);
        
    }
}

//counting sort 1

public class Solution {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int[] frequencies = new int[100];
        for(int i = 0; i < n; i++)
        {
            int num = input.nextInt();
            frequencies[num] = frequencies[num] + 1;
        }
        
        for(int i = 0; i < frequencies.length; i++)
        {
            System.out.print(frequencies[i]+" ");
        }
    }
}


